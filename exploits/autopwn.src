MTXExploit                    	       = get_custom_object.MTXExploit
MTXExploit.name               	       = "Library Autopwn to for mtx framework by chabox"
MTXExploit.description        	       = "The famous autopwn tool to scan vulnerabilities on any target and adds sessions obtained to mtx"
MTXExploit.author             	       = "Chabox"
MTXExploit.rank               	       = "Good"
MTXExploit.privileged         	       = "unlisted"
MTXExploit.disclosure_date    	       = "07/07/2024"
MTXExploit.options["RHOST"] 	       = {"required": 1, "default": "192.168.0.1", "description": "Target IP Address"}
MTXExploit.options["RPORT"] 	       = {"required": 1, "default": "0", "description": "Target Port Number"}
MTXExploit.options["ARGUMENT"]         = {"required": 1, "default": "hacked", "description": "Injection"}
MTXExploit.options["SAVE"]             = {"required": 0, "default": "true", "description": "Save exploit info to host computer"}
libs = {}
libs.scanLib = function(metaLib, metaxploit)
    if not metaLib then return null
    if not metaxploit then metaxploit = globals.metaxploit
    ret = {}
    ret.libname = metaLib.lib_name
    ret.version = metaLib.version
    ret.memorys = {}
    memorys = metaxploit.scan(metaLib)
    for memory in memorys
        addresses = metaxploit.scan_address(metaLib, memory).split("Unsafe check:")
        ret.memorys[memory] = []
        for address in addresses
            if address == addresses[0] then continue
            value = address[address.indexOf("<b>")+3:address.indexOf("</b>")]
            value = value.replace("\n", "")
            ret.memorys[memory] = ret.memorys[memory] + [value]
        end for
    end for
    return ret
end function
MTXExploit.check = function(options)
		save            = options.SAVE
		target          = options.RHOST
		port            = options.RPORT.to_int
		print_info("Attempt to connect on remote host...", target+":"+port)
		net = metaxploit.net_use(target, port)
		if not net then return print_error("Unable to connect to remote host", target+":"+port)
	    print_good("Succesfully connected!", target+":"+port)
		if type(net) != "metalib" then return print_error("No metalib found")
        print_good("Metalib <color=white>"+net.dump_lib.lib_name+"</color=white> Version <color=white>"+net.dump_lib.version)
		return true
end function
MTXExploit.run = function(options)
		save            = options.SAVE
		target          = options.RHOST
		port            = options.RPORT.to_int
		argument        = options.ARGUMENT
		address         = []
		variable        = []
		//if save == "true" or save == "false" then return print_error("save option invalid")
		print_info("Attempt to connect on remote host...", target+":"+port)
		net = metaxploit.net_use(target, port)
		metalib = net.dump_lib
		if not net then return print_error("Unable to connect to remote host", target+":"+port)
		print_good("Succesfully connected!", target+":"+port)
		ret = libs.scanLib(metalib, metaxploit)
		print_info(ret.libname+" "+ret.version)
		for memory in ret.memorys
			print_info("<color=red><b>"+memory.key)
			for value in memory.value
				overlow = metalib.overflow(memory.key, value, argument)
				register_session(overlow)
				if save == "true" then
					type = typeof(overlow)
	            	if typeof(overlow) == "null" then type = "generic"
	            	if typeof(overlow) == "number" then type = "passwchanger"
	            	if port == 0 and typeof(overlow) == "number" then type = "fwshutdown"
	            	if port == 0 and typeof(overlow) == "null" then type = "lanswitcher"
	            	exploit = {}
        			exploit.library = ret.libname
          			exploit.version = ret.version
           			exploit.address = memory.key
           			exploit.variable = value
           			exploit.authentication = "root"
           			exploit.type = type
           			exploit.requirements = "Made by Chabox@"
           			exploit.raw_info = "Null"
           			exploit.name = "exploits/" + compose_exploit_name(exploit)
           			exploit.id = "exploit/" + exploit.name.split("exploits/")[1].replace(".src", "")
           			exploit.overflow = overlow
           			ln
       			 	print_good("Successfully created new exploit: " + exploit.id)
           			ln
           			write_exploit(exploit)
				else if save == "false" then
					print_info("Save set to false")
				else
					print_error("Save invalid")
				end if
			end for
		end for
		return true
end function

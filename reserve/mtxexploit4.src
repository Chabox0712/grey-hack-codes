MTXExploit                    	       = get_custom_object.MTXExploit
MTXExploit.name               	       = "__name"
MTXExploit.description        	       = "__description"
MTXExploit.author             	       = "_author"
MTXExploit.rank               	       = "_rank"
MTXExploit.privileged         	       = "__privileged"
MTXExploit.disclosure_date    	       = "_disclosure_date"
MTXExploit.options["RHOST"] 	       = {"required": 1, "default": "192.168.0.1", "description": "Target IP Address"}
MTXExploit.options["RPORT"] 	       = {"required": 1, "default": "_port", "description": "Target Port Number"}
MTXExploit.options["ARGUMENT"]         = {"required": "_argument_required", "default": "", "description": "_argument_drescription"}

MTXExploit.check = function(options)
		target          = options.RHOST
		port            = options.RPORT.to_int
		argument        = options.ARGUMENT
		library_name    = "_library_name"
		library_version = "_library_version"
		address         = "_address"
		variable        = "_variable"
		print_info("Attempt to connect on remote host...", target+":"+port)
		net = metaxploit.net_use(target, port)
		if not net then return print_error("Unable to connect to remote host", target+":"+port)
		print_good("Succesfully connected!", target+":"+port)
		if net.dump_lib.lib_name != library_name or net.dump_lib.version.to_int > library_version.to_int then return print_error("Different library. Required: _library_name <= _library_version ", target+":"+port)
		return true
end function

MTXExploit.run = function(options)
		target          = options.RHOST
		port            = options.RPORT.to_int
		argument        = options.ARGUMENT
		library_name    = "_library_name"
		library_version = "_library_version"
		address         = "_address"
		variable        = "_variable"
		print_info("Attempt to connect on remote host...", target+":"+port)
		net = metaxploit.net_use(target, port)
		if not net then return print_error("Unable to connect to remote host", target+":"+port)
		print_good("Succesfully connected!", target+":"+port)
		if net.dump_lib.lib_name != library_name or net.dump_lib.version.to_int > library_version.to_int then return print_error("Different library. Required: _library_name <= _library_version ", target+":"+port)
		print_good("Library check: OK")
		print_info("Attempt to oveflow the target library", target+":"+port)
		overflow_result = net.dump_lib.overflow(address, variable, argument)
		if not overflow_result then return print_error("Unable to perform an overflow to the target library. Try to check the requirements")
		register_session(overflow_result)
		return true
end function
